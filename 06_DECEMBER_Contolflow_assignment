{
 "cells": [
  {
   "cell_type": "raw",
   "id": "8b91765b-a0e4-473b-9839-9872b39fdbd6",
   "metadata": {},
   "source": [
    "BASIC IF ELSE STATEMENTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccfcc5fc-03fe-4322-b8ab-5539da243688",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1 Write a Python program to check if a given number is positive or negative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac848881-09c9-476f-8e27-0e1b5c4f2eb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter a number : \"))\n",
    "if a>0:\n",
    "      print(\"Enter number is positive.\")\n",
    "elif a==0:\n",
    "      print(\"Enter number is neither positive nor negative.\")\n",
    "else:\n",
    "      print(\"Enter number is negative.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6f688c9-9fd1-45f3-bd4d-e346af3c2459",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2 Create a program that determines if a person is eligible to vote based on their age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e2e200a-9633-42ee-be4d-074a0cdc62ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter your age : \"))\n",
    "if a>=18:\n",
    "    print(\"Your are eligible to vote.\")\n",
    "else:\n",
    "    print(\"Your are not eligible to vote.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "95d9553c-c50f-42b4-8065-44171c840576",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3 Develop a program to find the maximum of two numbers using if-else statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4505493-b4bd-4cf2-8090-fe8d8c092e92",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first number : \"))\n",
    "b=int(input(\"Enter second number : \"))\n",
    "if a>b:\n",
    "    print(\"First number is maximum\")\n",
    "elif a==b:\n",
    "    print(\"Both numbers are equal\")\n",
    "else :\n",
    "    print(\"Second number is maximum\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39d6945f-c6b5-49a2-8457-1d2f0e7612d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#4 Write a Python script to classify a given year as a leap year or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd683a0d-31ae-4953-a615-05df31e63028",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter an Year : \"))\n",
    "if a>=1996 and a%4==0:\n",
    "    print(\"Entered Year is an leap year.\")\n",
    "else:\n",
    "    print(\"Entered Year is not an leap year.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c48807e4-c341-4c94-aa31-4096260d17da",
   "metadata": {},
   "outputs": [],
   "source": [
    "#5 Create a program that checks whether a character is a vowel or a consonant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17cec3ee-846c-4d71-8977-0495e3cd1507",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter a character\")\n",
    "b=\"aeiouAEIOU\"\n",
    "if a in b:\n",
    "    print(\"Entered character is vowel\")\n",
    "else:\n",
    "    print(\"Entered character is consonant\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "637d70af-4ca9-4cc6-b85a-7dd95c88716b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#6 Implement a program to determine whether a given number is even or odd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc00be82-989d-4948-a159-864618ea3d92",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter a number : \"))\n",
    "if a%2==0:\n",
    "      print(\"Even number!\")\n",
    "else:\n",
    "      print(\"Odd number!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3efbb997-1072-4785-82d6-19e19a90c7ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#7 Write a Python function to calculate the absolute value of a number without using the `abs()` function "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87a436ac-66a8-4d0f-bec9-ee8e0c8a0b09",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter a number : \"))\n",
    "if a<0:\n",
    "    print(-a)\n",
    "else:\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8a0bef1-dc83-46b9-b6fe-2a3eaa9c4f21",
   "metadata": {},
   "outputs": [],
   "source": [
    "#8 Develop a program that determines the largest of three given numbers using if-else statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "247e98b6-eb97-4469-a576-e48bf1887fc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first  number : \"))\n",
    "b=int(input(\"Enter second number : \"))\n",
    "c=int(input(\"Enter third  number : \"))\n",
    "if a>b and a>c:\n",
    "    print(\"First number is the largest\")\n",
    "elif b>a and b>c:\n",
    "    print(\"Second number is the largest\")\n",
    "else:\n",
    "    print(\"Third number is the largest\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e561bf4-76b1-4f94-b14f-7c1ef8582054",
   "metadata": {},
   "outputs": [],
   "source": [
    "#9 Create a program that checks if a given string is a palindrome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "922f23df-03ff-4551-81d0-01eda3925548",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter a string : \")\n",
    "if a==a[::-1]:\n",
    "    print(\"Entered string is palindrome\")\n",
    "else:\n",
    "    print(\"Entered string is not palindrome\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0924453b-de08-48bf-8b3c-75fd70b8fd9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#10 Write a Python program to calculate the grade based on a student's score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f52fd71e-4d2d-4779-9701-21f072cbb4fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter marks scored out of 100 : \"))\n",
    "if a>=50 and a<=100:\n",
    "    if a>=90 and a<=100:\n",
    "        print(\"A grade\")\n",
    "    if a>=70 and a<90:\n",
    "        print(\"B grade\")\n",
    "    if a>=50 and a<70:\n",
    "        print(\"C grade\")\n",
    "else:\n",
    "    print(\"D grade\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a3524767-8372-4db2-8e7e-628883a91e6f",
   "metadata": {},
   "source": [
    "NESTED IFELSE STATEMENTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b84912c8-1cbe-4d85-90bb-254e446de983",
   "metadata": {},
   "outputs": [],
   "source": [
    "#11 Write a program to find the largest among three numbers using nested if-else statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a3a4db1-b6d2-465e-8ec6-f5adb00cf1d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first  number : \"))\n",
    "b=int(input(\"Enter second number : \"))\n",
    "c=int(input(\"Enter third  number : \"))\n",
    "if a>b:\n",
    "    if a>c:\n",
    "        print(\"First number is the lagrest\")\n",
    "    else:\n",
    "        print(\"Third number is the largest\")\n",
    "else:\n",
    "    if b>c:\n",
    "        print(\"Second number is the largest\")\n",
    "    else:\n",
    "        print(\"Third number is the largest\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58a5deca-70a5-4379-bc22-353f0fd04c47",
   "metadata": {},
   "outputs": [],
   "source": [
    "#12 Implement a program to determine if a triangle is equilateral, isosceles, or scalene"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8813610-3c0b-4a0e-a9ad-941ad2a7ae28",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first  length : \"))\n",
    "b=int(input(\"Enter second length : \"))\n",
    "c=int(input(\"Enter third  length : \"))\n",
    "if a==b==c:\n",
    "    print(\"Triangle is equilateral\")\n",
    "elif a==b or b==c or c==a:\n",
    "    print(\"Triangle is isosceles\")\n",
    "else:\n",
    "    print(\"Triangle is scalene\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ded5c88-ea6f-4d53-a4ce-b7c892199a29",
   "metadata": {},
   "outputs": [],
   "source": [
    "#13 Develop a program that checks if a year is a leap year and also if it is a century year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18b56635-f6e1-490a-9ebc-78fc6b162100",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter an Year : \"))\n",
    "sum=0\n",
    "if a>=1996 and a%4==0:\n",
    "    print(\"Entered Year is an leap year.\")\n",
    "    sum+=1\n",
    "    if sum==1 and a%100==0:\n",
    "        print(\"Entered Year is an century year.\")\n",
    "    else:\n",
    "        print(\"Entered Year is not an century year.\")\n",
    "else:\n",
    "    print(\"Entered Year is not an leap year.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2958da6c-6322-4090-9fea-013d9b230999",
   "metadata": {},
   "outputs": [],
   "source": [
    "#14 Write a Python script to determine if a number is positive, negative, or zero"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93196706-26e9-4fac-98fa-a6674009b382",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter a number : \"))\n",
    "if a>0:\n",
    "      print(\"Enter number is positive.\")\n",
    "elif a==0:\n",
    "      print(\"Enter number is neither positive nor negative.\")\n",
    "else:\n",
    "      print(\"Enter number is negative.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a044cd8-b610-4f51-bcf7-0e5109207fad",
   "metadata": {},
   "outputs": [],
   "source": [
    "#15 Create a program to check if a person is a teenager (between 13 and 19 years old)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7b4bdeb-fc46-4804-a9b7-09f4a024dfc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter your age : \"))\n",
    "if a>=13 and a<=19:\n",
    "    print(\"Your are a teenager\")\n",
    "else:\n",
    "    print(\"Your are not a teenager\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bce83963-8d40-4831-b2d1-3d0bf846f4aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#16 Develop a program that determines the type of angle based on its measure (acute, obtuse, or right)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28dfb8a6-74a9-4ffa-9eb6-c5b5afcb013b",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter an angel between 0 and 180 : \"))\n",
    "if a==90:\n",
    "    print(\"Right angle\")\n",
    "elif a>0 and a<90:\n",
    "    print(\"Acute angle\")\n",
    "else:\n",
    "    print(\"Obtuse angle\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bb551abb-e15d-48cf-844b-db8d530cbd7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#17 Write a Python program to calculate the roots of a quadratic equation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d732f94-a25a-476a-9f97-dd3490c7f06c",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=float(input(\"Enter the coefficient a: \"))\n",
    "b=float(input(\"Enter the coefficient b: \"))\n",
    "c=float(input(\"Enter the coefficient c: \"))\n",
    "d=(b**2-4*a*c)\n",
    "if a==0:\n",
    "    print(\"Only root = \",-b/c)\n",
    "elif d>0:\n",
    "    print(\"Real and distinct roots are = \")\n",
    "    print((-b+(d**0.5))/(2*a))\n",
    "    print((-b-(d**0.5))/(2*a))\n",
    "elif d==0:\n",
    "    print(\"Reapeated roots are = \")\n",
    "    print(-b/(2*a))\n",
    "    print(-b/(2*a))\n",
    "else:\n",
    "    print(\"Complex roots are = \")\n",
    "    print((-b/(2*a))+((d**0.5)/(2**a)))\n",
    "    print((-b/(2*a))+((d**0.5)/(2**a)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9de36e17-39d9-4d96-be99-1a7bce43f007",
   "metadata": {},
   "outputs": [],
   "source": [
    "#18 Implement a program to determine the day of the week based on a user-provided number (1 for Monday, 2 for Tuesday, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edb63ef5-e5b1-49a1-bac1-8e90f1a2dce7",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter the number of the day : \"))\n",
    "d=[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]\n",
    "if a<=1 and a<=7:\n",
    "    c=d.pop(a-1)\n",
    "    print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb8e3240-d118-4c80-a6aa-e7be5bd0815f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#19 Create a program that determines if a year is a leap year and also if it is evenly divisible by 400"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5351c2e-edf1-486b-8093-4d85d5b6d75f",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter an Year : \"))\n",
    "sum=0\n",
    "if a>=1996 and a%4==0:\n",
    "    print(\"Entered Year is an leap year.\")\n",
    "    sum+=1\n",
    "    if sum==1 and a%400==0:\n",
    "        print(\"Entered Year is divisible by 400.\")\n",
    "    else:\n",
    "        print(\"Entered Year is not divisible by 400.\")\n",
    "else:\n",
    "    print(\"Entered Year is not an leap year.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9df21867-8839-47c1-9372-583d00df1f90",
   "metadata": {},
   "outputs": [],
   "source": [
    "#20 Develop a program that checks if a given number is prime or not using nested if-else statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ffd5125-f18c-41a6-9b0b-cd64309b05c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "i=int(input(\"Enter a number : \"))\n",
    "if(i%2!=0 and i%3!=0 and i%5!=0 and i%7!=0):\n",
    "    print(\"Prime number\")\n",
    "else:\n",
    "    print(\"Not a Prime number\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "050d0c76-d2a4-4dfd-aff7-5eca31bde7ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "ELIF STATEMENTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7274ac00-b9e2-4c06-995a-d8b57b9f2a87",
   "metadata": {},
   "outputs": [],
   "source": [
    "#21 Write a Python program to assign grades based on different ranges of scores using elif statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a93d969-b9aa-4a8e-b102-6ab81c9007ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter marks scored out of 100 : \"))\n",
    "if a>=90 and a<=100:\n",
    "    print(\"A grade\")\n",
    "elif a>=70 and a<90:\n",
    "    print(\"B grade\")\n",
    "elif a>=50 and a<70:\n",
    "    print(\"C grade\")\n",
    "else:\n",
    "    print(\"D grade\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd9aa602-7add-4982-acfc-d5b557aa12e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#22 Implement a program to determine the type of a triangle based on its angles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4803367-b99b-490f-a249-e28db1b381ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first  angle : \"))\n",
    "b=int(input(\"Enter second angle : \"))\n",
    "c=int(input(\"Enter third  angle : \"))\n",
    "if a+b+c==180:\n",
    "    if a==b==c:\n",
    "        print(\"Triangle is equilateral\")\n",
    "    elif a==b or b==c or c==a:\n",
    "        print(\"Triangle is isosceles\")\n",
    "    else:\n",
    "        print(\"Triangle is scalene\")\n",
    "else:\n",
    "    print(\"Invalid angles\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "674f1ab1-f294-480b-91d1-3f9ceba253ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "#23 Develop a program to categorize a given person's BMI into underweight, normal, overweight, or obese using elif statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2cd6674-c449-4af8-86ea-1f881195dbaf",
   "metadata": {},
   "outputs": [],
   "source": [
    "w=float(input(\"Enter your weight in kilograms : \"))\n",
    "h=float(input(\"Enter your height in meters : \"))\n",
    "bmi=w/(h**2)\n",
    "if bmi<18.5:\n",
    "    print(\"Underweight\")\n",
    "elif 18.5<=bmi<24.9:\n",
    "    print(\"Normal weight\")\n",
    "elif 25<=bmi<29.9:\n",
    "    print(\"Overweight\")\n",
    "else:\n",
    "    print(\"Obese\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "007a580d-517f-41a2-b40a-172869686b8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#24 Create a program that determines whether a given number is positive, negative, or zero using elif statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76db2eb8-cc11-45bc-b576-733ef5af6988",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter a number : \"))\n",
    "if a>0:\n",
    "      print(\"Enter number is positive.\")\n",
    "elif a==0:\n",
    "      print(\"Enter number is neither positive nor negative.\")\n",
    "else:\n",
    "      print(\"Enter number is negative.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "690a2660-18e9-428f-9e66-1bc71b78fa91",
   "metadata": {},
   "outputs": [],
   "source": [
    "#25 Write a Python script to determine the type of a character (uppercase, lowercase, or special) using elif statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14b00665-2390-437c-a163-29b270cd7f0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter the character : \")\n",
    "if a.isupper():\n",
    "    print(\"Uppercase\")\n",
    "elif a.islower():\n",
    "    print(\"Lowercase\")\n",
    "elif a.isdigit():\n",
    "    print(\"Numeric\")\n",
    "else:\n",
    "    print(\"Special character\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6f1a033-100f-45d5-985d-f1ce3fd14de3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#26 Implement a program to calculate the discounted price based on different purchase amounts using elif statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fc68ba3-025a-425d-a522-824dcf8fed84",
   "metadata": {},
   "outputs": [],
   "source": [
    "i=int(input(\"Enter the amount of purchase\"))\n",
    "if i>=100 and i<200:\n",
    "      d1=20\n",
    "      print(\"Your total is \",i-d1)\n",
    "elif i>=200 and i<500:\n",
    "      d2=50\n",
    "      print(\"Your total is \",i-d2)\n",
    "elif i>=500:\n",
    "      d3=150\n",
    "      print(\"Your total is \",i-d3)\n",
    "else:\n",
    "      print(\"Your total is \",i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7cc4fdd-b30d-418d-91c8-be467392c0f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#27 Develop a program to calculate the electricity bill based on different consumption slabs using elif statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "506670af-cdbd-4758-ad33-063804ab7d77",
   "metadata": {},
   "outputs": [],
   "source": [
    "u=int(input(\"Enter the number of units consumed : \"))\n",
    "if u<=50:\n",
    "    print(\"cost = \",50*0.5)\n",
    "elif u>50 and u<=100:\n",
    "    print(\"cost = \",(50*0.5)+((u-50)*0.75))\n",
    "elif u>100 and u<=200:\n",
    "    print(\"cost = \",(50*0.5)+(50*0.75)+((u-100)*1))\n",
    "else:\n",
    "    print(\"Visit the electricity office\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4d23f9d-326f-4873-9b66-372291787212",
   "metadata": {},
   "outputs": [],
   "source": [
    "#28 Create a program to determine the type of quadrilateral based on its angles and sides using elif statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63b85110-f475-4dea-a521-a94ec43025c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter the length of side a : \"))\n",
    "b=int(input(\"Enter the length of side b : \"))\n",
    "c=int(input(\"Enter the length of side c : \"))\n",
    "d=int(input(\"Enter the length of side d : \"))\n",
    "a1=int(input(\"Enter the measure of angle 1 : \"))\n",
    "a2=int(input(\"Enter the measure of angle 2 : \"))\n",
    "a3=int(input(\"Enter the measure of angle 3 : \"))\n",
    "a4=int(input(\"Enter the measure of angle 4 : \"))\n",
    "if (a==b==c==d) and (a1==a2==a3==a4==90):\n",
    "    print(\"Square\")\n",
    "elif (a==c and b==d) and a1==a2==a3==a4==90:\n",
    "    print(\"Rectangle\")\n",
    "elif (a==b==c==d) and (a1==a2==a3==a4):\n",
    "    print(\"Rhombus\")\n",
    "elif (a1==a3 and a2==a4):\n",
    "    print(\"Parallelogram\")\n",
    "else:\n",
    "    print(\"Other type of quadrilateral\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb20bf5a-c407-4355-9386-7818f218e94d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#29 Write a Python script to determine the season based on a user-provided month using elif statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8fc6653-ce25-4b5c-b059-3fab807ca7e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "m=input(\"Enter the month : \")\n",
    "month=m.lower()\n",
    "if month in ['december', 'january', 'february']:\n",
    "    print(\"Winter\")\n",
    "elif month in ['march', 'april', 'may']:\n",
    "    print(\"Spring\")\n",
    "elif month in ['june', 'july', 'august']:\n",
    "    print(\"Summer\")\n",
    "elif month in ['september', 'october', 'november']:\n",
    "    print(\"Fall\")\n",
    "else:\n",
    "    print(\"Invalid month\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "107f9516-cd77-452d-9a63-419410d773b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#30 Implement a program to determine the type of a year (leap or common) and month (30 or 31 days) using elif statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d35de0af-9a07-4924-b6a7-23294d863c26",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter an Year : \"))\n",
    "sum=0\n",
    "if a>=1996 and a%4==0:\n",
    "    sum+=1\n",
    "    print(\"Leap year\")\n",
    "else:\n",
    "    print(\"Common year\")\n",
    "m=int(input(\"Enter the number of the month : \"))\n",
    "if m in [1, 3, 5, 7, 8, 10, 12]:\n",
    "    print(\"31 days\")\n",
    "elif m in [4, 6, 9, 11]:\n",
    "    print(\"30 days\")\n",
    "elif m==2:\n",
    "    if sum==1:\n",
    "        print(\"29 days\")\n",
    "    else:\n",
    "        print(\"28 days\")       \n",
    "else:\n",
    "    print(\"Invalid Month\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e93c690d-6cfe-48c6-add3-5f46f9c86d38",
   "metadata": {},
   "source": [
    "BASIC LEVEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0691bc16-0e2b-4d66-abda-00f162c84412",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1 Write a Python program that checks if a given number is positive, negative, or zero"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f53b8138-bc64-4a39-aa46-b31f258dcf91",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter a number : \"))\n",
    "if a>0:\n",
    "      print(\"Enter number is positive.\")\n",
    "elif a==0:\n",
    "      print(\"Enter number is neither positive nor negative.\")\n",
    "else:\n",
    "      print(\"Enter number is negative.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f47dcd65-4ddb-4b98-b975-6648c69a3c40",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2 Create a program to determine if a person is eligible to vote based on their age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ea13c49-24e4-4db7-9898-1b528ff49137",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter your age : \"))\n",
    "if a>=18:\n",
    "    print(\"Your are eligible to vote.\")\n",
    "else:\n",
    "    print(\"Your are not eligible to vote.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f2fd902-a849-48e3-aa0c-e52e4772910f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3 Write a program to find the maximum of two given numbers using conditional statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6eb16ed6-4e8d-4734-a729-371d5c088877",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first number : \"))\n",
    "b=int(input(\"Enter second number : \"))\n",
    "if a>b:\n",
    "    print(\"First number is maximum\")\n",
    "elif a==b:\n",
    "    print(\"Both numbers are equal\")\n",
    "else :\n",
    "    print(\"Second number is maximum\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e83b227-1cd8-4fbf-aae8-b868c55dadeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#4 Develop a program that calculates the grade of a student based on their exam score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "112fab99-37a7-4162-915a-d9289a63e02c",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter marks scored out of 100 : \"))\n",
    "if a>=50 and a<=100:\n",
    "    if a>=90 and a<=100:\n",
    "        print(\"A grade\")\n",
    "    if a>=70 and a<90:\n",
    "        print(\"B grade\")\n",
    "    if a>=50 and a<70:\n",
    "        print(\"C grade\")\n",
    "else:\n",
    "    print(\"D grade\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe1283a5-33e0-4ca5-90de-a780a28872e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#5 Create a program that checks if a year is a leap year or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d314cb29-19e5-40ff-818d-355e49edd7ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter an Year : \"))\n",
    "if a>=1996 and a%4==0:\n",
    "    print(\"Entered Year is an leap year.\")\n",
    "else:\n",
    "    print(\"Entered Year is not an leap year.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8010051-0e18-470b-8911-fe8df9240947",
   "metadata": {},
   "outputs": [],
   "source": [
    "#6 Write a program to classify a triangle based on its sides' lengths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "210f2d58-19e9-4715-a9e6-41c22b179c8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first  length : \"))\n",
    "b=int(input(\"Enter second length : \"))\n",
    "c=int(input(\"Enter third  length : \"))\n",
    "if a==b==c:\n",
    "    print(\"Triangle is equilateral\")\n",
    "elif a==b or b==c or c==a:\n",
    "    print(\"Triangle is isosceles\")\n",
    "else:\n",
    "    print(\"Triangle is scalene\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6eaa67e2-90d3-49d2-ba3f-4c77c3761404",
   "metadata": {},
   "outputs": [],
   "source": [
    "#7 Build a program that determines the largest of three given numbers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17911828-b72b-4857-b0c2-2e53be92f232",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first  number : \"))\n",
    "b=int(input(\"Enter second number : \"))\n",
    "c=int(input(\"Enter third  number : \"))\n",
    "if a>b and a>c:\n",
    "    print(\"First number is the largest\")\n",
    "elif b>a and b>c:\n",
    "    print(\"Second number is the largest\")\n",
    "else:\n",
    "    print(\"Third number is the largest\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f21be6c-1007-4313-9f5d-8b0595afb774",
   "metadata": {},
   "outputs": [],
   "source": [
    "#8 Develop a program that checks whether a character is a vowel or a consonant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9141df37-93be-4ba1-b9bc-6c0f6b3dd9f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter a character\")\n",
    "b=\"aeiouAEIOU\"\n",
    "if a in b:\n",
    "    print(\"Entered character is vowel\")\n",
    "else:\n",
    "    print(\"Entered character is consonant\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c25f1841-e5af-416a-bebe-4ffc5896659e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#9 Create a program to calculate the total cost of a shopping cart based on discounts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60ff8f11-4dbd-4f3d-8d1c-c3427ece5d73",
   "metadata": {},
   "outputs": [],
   "source": [
    "i=int(input(\"Enter the amount of purchase\"))\n",
    "if i>=100 and i<200:\n",
    "      d1=20\n",
    "      print(\"Your total is \",i-d1)\n",
    "elif i>=200 and i<500:\n",
    "      d2=50\n",
    "      print(\"Your total is \",i-d2)\n",
    "elif i>=500:\n",
    "      d3=150\n",
    "      print(\"Your total is \",i-d3)\n",
    "else:\n",
    "      print(\"Your total is \",i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb18715a-375c-4b29-a1a7-dd8054f0fd56",
   "metadata": {},
   "outputs": [],
   "source": [
    "#10 Write a program that checks if a given number is even or odd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e4e02f9-d226-47b2-9ed9-5fae2abde168",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter a number : \"))\n",
    "if a%2==0:\n",
    "    print(\"Even number\")\n",
    "else:\n",
    "    print(\"Odd number\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acef9e98-1261-4cd3-8e84-be51ac84f32a",
   "metadata": {},
   "source": [
    "INTERMEDIATE LEVEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2aa1731-a4f5-4045-8385-adb9dab083db",
   "metadata": {},
   "outputs": [],
   "source": [
    "#11 Write a program that calculates the roots of a quadratic equation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c745b4e-5e1f-432c-b3e3-62471f80c8fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=float(input(\"Enter the coefficient a: \"))\n",
    "b=float(input(\"Enter the coefficient b: \"))\n",
    "c=float(input(\"Enter the coefficient c: \"))\n",
    "d=(b**2-4*a*c)\n",
    "if a==0:\n",
    "    print(\"Only root = \",-b/c)\n",
    "elif d>0:\n",
    "    print(\"Real and distinct roots are = \")\n",
    "    print((-b+(d**0.5))/(2*a))\n",
    "    print((-b-(d**0.5))/(2*a))\n",
    "elif d==0:\n",
    "    print(\"Reapeated roots are = \")\n",
    "    print(-b/(2*a))\n",
    "    print(-b/(2*a))\n",
    "else:\n",
    "    print(\"Complex roots are = \")\n",
    "    print((-b/(2*a))+((d**0.5)/(2**a)))\n",
    "    print((-b/(2*a))+((d**0.5)/(2**a)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d602ac39-8625-4ddb-9e69-efd94082a697",
   "metadata": {},
   "outputs": [],
   "source": [
    "#12 Create a program that determines the day of the week based on the day number (1-7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1142a931-fc49-4c1b-a851-316f4e418231",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter the number of the day : \"))\n",
    "d=[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]\n",
    "b=a-1\n",
    "if a<=1 and a<=7:\n",
    "    print(d[b])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bf2a0d3-36b6-47a7-838b-e0ac35623809",
   "metadata": {},
   "outputs": [],
   "source": [
    "#13 Develop a program that calculates the factorial of a given number using recursion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bbfa2ab0-d8c9-4795-87af-9162196d9267",
   "metadata": {},
   "outputs": [],
   "source": [
    "n=int(input(\"Enter a number : \"))\n",
    "f=1\n",
    "for i in range(1,n+1):\n",
    "    f*=i\n",
    "print(\"Factorial : \",f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60e1ab9b-8c32-4023-bfc9-b32230d1fb47",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "#14 Write a program to find the largest among three numbers without using the `max()` function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1ca2923-850c-4bb7-8ef2-a3837d8200ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter first  number : \"))\n",
    "b=int(input(\"Enter second number : \"))\n",
    "c=int(input(\"Enter third  number : \"))\n",
    "if a>b and a>c:\n",
    "    print(\"First number is the largest\")\n",
    "elif b>a and b>c:\n",
    "    print(\"Second number is the largest\")\n",
    "else:\n",
    "    print(\"Third number is the largest\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b61af4bd-e401-4536-90f3-70d7a969d78f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#15 Create a program that simulates a basic ATM transaction menu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d94981a-654f-43e3-bf8e-84790e311631",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n**** ATM Menu ****\")\n",
    "print(\"1. Display Balance\")\n",
    "print(\"2. Deposit Money\")\n",
    "print(\"3. Withdraw Money\")\n",
    "print(\"4. Exit\")\n",
    "b=int(input(\"Enter the option : \"))\n",
    "if b==1:\n",
    "    print(\"Your balance is : \",5000)\n",
    "elif b==2:\n",
    "    d=int(input(\"Enter the amount : \"))\n",
    "    print(\"Cash Deposited Succesfully\")\n",
    "    print(\"Your balance is : \",5000+d)\n",
    "elif b==3:\n",
    "    w=int(input(\"Enter the amount : \"))\n",
    "    if w>5000:\n",
    "        print(\"Withdrawal not possible\")\n",
    "    else:\n",
    "        print(\"Cash Withdrawn Succesfully\")\n",
    "        print(\"Your balance is : \",5000-w)\n",
    "elif b==4:\n",
    "    print(\"Thank You\")\n",
    "else:\n",
    "    print(\"Invalid input\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8f8d624-9158-4af8-a2e4-0085fc1c028b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#16 Build a program that checks if a given string is a palindrome or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c3dc9fc6-55b9-4f7c-8cfd-9d652d177074",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=input(\"Enter a string : \")\n",
    "if a==a[::-1]:\n",
    "    print(\"Entered string is palindrome\")\n",
    "else:\n",
    "    print(\"Entered string is not palindrome\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "928f4cc6-0f50-4bac-9127-496439bc16e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#17 Write a program that calculates the average of a list of numbers, excluding the smallest and largest values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7de9b04-559d-445a-97b4-87408f8087a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=[int(i) for i in input(\"Enter a list of numbers seperated by a space : \").split()]\n",
    "b=sorted(a)\n",
    "b.pop(0)\n",
    "b.pop(-1)\n",
    "print(b)\n",
    "avg=(sum([i for i in b])/len(b))\n",
    "print(\"Average : \",avg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b83945db-c0b7-4135-98f3-aa831be782de",
   "metadata": {},
   "outputs": [],
   "source": [
    "#18 Develop a program that converts a given temperature from Celsius to Fahrenheit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a81ea457-37a5-44d0-a616-a53fe626ff9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "c=int(input(\"Enter the temperature in Celsius\"))\n",
    "f=(c*(9/5))+32\n",
    "print(\"Temperature in Fahrenheit : \",f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21d5f21b-64fa-484d-b00b-db7e32dc8d9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#19 Create a program that simulates a basic calculator for addition, subtraction, multiplication, and division"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10d03a9f-44fd-47e5-8441-69573f299666",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=int(input(\"Enter a number : \"))\n",
    "b=int(input(\"Enter a number : \"))\n",
    "c=input(\"\"\"Enter the operator \"+\" or \"-\" or \"*\" or \"/\" : \"\"\")\n",
    "if c==\"+\":\n",
    "    print(a+b)\n",
    "elif c==\"-\":\n",
    "    print(a-b)\n",
    "elif c==\"*\":\n",
    "    print(a*b)\n",
    "elif c==\"/\":\n",
    "    print(a/b)\n",
    "else:\n",
    "    print(\"Invalid input\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9b51ff7-0a6b-4340-90df-261211ab168e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#20 Write a program that determines the roots of a cubic equation using the Cardano formula"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "73218ff6-252b-47b3-8efc-89677d6f1051",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cmath\n",
    "def cubic_roots(a, b, c, d):\n",
    "    delta = 18*a*b*c*d - 4*b**3*d + b**2*c**2 - 4*a*c**3 - 27*a**2*d**2\n",
    "    delta_cubed_root = cmath.exp(cmath.log(delta, 3) / 3)\n",
    "    p = (3*a*c - b**2) / (3*a**2)\n",
    "    q = (2*b**3 - 9*a*b*c + 27*a**2*d) / (27*a**3)\n",
    "    root1 = -1/(3*a) * (b + delta_cubed_root + p/delta_cubed_root)\n",
    "    root2 = -1/(3*a) * (b + cmath.exp(2j*cmath.pi/3)*delta_cubed_root + p/cmath.exp(2j*cmath.pi/3)/delta_cubed_root)\n",
    "    root3 = -1/(3*a) * (b + cmath.exp(4j*cmath.pi/3)*delta_cubed_root + p/cmath.exp(4j*cmath.pi/3)/delta_cubed_root)\n",
    "    return root1, root2, root3\n",
    "a = float(input(\"Enter coefficient a: \"))\n",
    "b = float(input(\"Enter coefficient b: \"))\n",
    "c = float(input(\"Enter coefficient c: \"))\n",
    "d = float(input(\"Enter coefficient d: \"))\n",
    "roots = cubic_roots(a, b, c, d)\n",
    "print(\"Roots:\", roots)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "593cf50e-521c-44c7-a137-6603a4dffc9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ADVANCED LEVEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54c737a5-a0f6-4cc6-aaf7-d0e6076f4ea0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#21 Create a program that calculates the income tax based on the user's income and tax brackets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fed6bbd2-7cce-4787-bb9e-3ed4349eefce",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_income_tax(income):\n",
    "    brackets = [10000, 50000, 100000]\n",
    "    rates = [0.1, 0.2, 0.3, 0.4] \n",
    "    total_tax = 0\n",
    "    remaining_income = income\n",
    "    for i in range(len(brackets)):\n",
    "        if remaining_income <= 0:\n",
    "            break\n",
    "        current_bracket = min(remaining_income, brackets[i])\n",
    "        total_tax += current_bracket * rates[i]\n",
    "        remaining_income -= current_bracket\n",
    "    return total_tax\n",
    "income = float(input(\"Enter your annual income: \"))\n",
    "income_tax = calculate_income_tax(income)\n",
    "print(f\"Your income tax is: {income_tax:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8904aae2-080a-42c6-b962-140d689566b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#22 Write a program that simulates a rock-paper-scissors game against the computer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ada37a66-7b82-4eba-9de0-35f09bbaa5ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Welcome to rock-paper-scissors Game!\")\n",
    "a=input(\"Choose rock, paper or scissors : \")\n",
    "l=[\"rock\",\"paper\",\"scissors\"]\n",
    "c=a.lower()\n",
    "sum=0\n",
    "if c in l:\n",
    "    sum+=1\n",
    "else:\n",
    "    print(\"Invalid choice\")\n",
    "b=random.choice(['rock', 'paper', 'scissors'])\n",
    "if sum==1:\n",
    "    if c==b:\n",
    "        print(\"Your choice = \",c)\n",
    "        print(\"Computer choice = \",b)\n",
    "        print(\"It's a Tie!\")\n",
    "    elif (c==\"rock\" and b==\"scissors\") or (c==\"paper\" and b==\"rock\") or (c==\"scissors\" and b==\"paper\"):\n",
    "        print(\"Your choice = \",c)\n",
    "        print(\"Computer choice = \",b)\n",
    "        print(\"You WIN!\")\n",
    "    else:\n",
    "        print(\"Your choice = \",c)\n",
    "        print(\"Computer choice = \",b)\n",
    "        print(\"Computer WINS!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d83973b-ef90-445d-83d0-e2791ae3b083",
   "metadata": {},
   "outputs": [],
   "source": [
    "#23 Develop a program that generates a random password based on user preferences (length, complexity)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0068141-6fcb-4844-9d3b-13127a4c233e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import string\n",
    "import random\n",
    "\n",
    "print(\"Password Generator\")\n",
    "a = int(input(\"Enter the length of the password: \"))\n",
    "b = input(\"Include lowercase letters? (yes/no): \").lower()\n",
    "c = input(\"Include uppercase letters? (yes/no): \").lower()\n",
    "d = input(\"Include digits? (yes/no): \").lower()\n",
    "e = input(\"Include special characters? (yes/no): \").lower()\n",
    "l = string.ascii_lowercase\n",
    "u = string.ascii_uppercase\n",
    "di = string.digits\n",
    "ch = string.punctuation\n",
    "s = \"\"\n",
    "\n",
    "if b == c == d == e == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(l + u + di + ch)\n",
    "    print(s)\n",
    "elif b == d == e == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(l + di + ch)\n",
    "    print(s)\n",
    "elif b == c == e == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(l + u + ch)\n",
    "    print(s)\n",
    "elif c == d == e == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(u + di + ch)\n",
    "    print(s)\n",
    "elif b == d == c == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(l + di + u)\n",
    "    print(s)\n",
    "elif b == e == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(l + ch)\n",
    "    print(s)\n",
    "elif b == d == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(l + di)\n",
    "    print(s)\n",
    "elif b == c == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(l + u)\n",
    "    print(s)\n",
    "elif c == d == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(u + di)\n",
    "    print(s)\n",
    "elif c == e == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(u + ch)\n",
    "    print(s)\n",
    "elif d == e == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(di + ch)\n",
    "    print(s)\n",
    "elif b == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(l)\n",
    "    print(s)\n",
    "elif c == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(u)\n",
    "    print(s)\n",
    "elif d == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(di)\n",
    "    print(s)\n",
    "elif e == \"yes\":\n",
    "    for i in range(a):\n",
    "        s += random.choice(ch)\n",
    "    print(s)\n",
    "else:\n",
    "    print(\"Invalid input\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2627c4d1-bc3c-4651-bf0c-8cdac0670d1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#24 Create a program that implements a simple text-based adventure game with branching scenarios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94880425-6df4-4ace-a6a1-2dcade36eab3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "\n",
    "def introduction():\n",
    "    print(\"Welcome to the Text Adventure Game!\")\n",
    "    time.sleep(1)\n",
    "    print(\"You find yourself in a dark, mysterious forest.\")\n",
    "    time.sleep(1)\n",
    "    print(\"Your goal is to reach the treasure hidden deep within.\")\n",
    "    time.sleep(1)\n",
    "\n",
    "def make_choice(choices):\n",
    "    for i, choice in enumerate(choices, 1):\n",
    "        print(f\"{i}. {choice}\")\n",
    "\n",
    "    while True:\n",
    "        try:\n",
    "            choice = int(input(\"Enter your choice: \"))\n",
    "            if 1 <= choice <= len(choices):\n",
    "                return choice\n",
    "            else:\n",
    "                print(\"Invalid choice. Try again.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Enter a number.\")\n",
    "\n",
    "def forest_scenario():\n",
    "    print(\"You enter the forest.\")\n",
    "    time.sleep(1)\n",
    "    print(\"You come across a fork in the path.\")\n",
    "\n",
    "    choices = [\"Take the left path.\", \"Take the right path.\"]\n",
    "    choice = make_choice(choices)\n",
    "\n",
    "    if choice == 1:\n",
    "        print(\"You chose the left path.\")\n",
    "        time.sleep(1)\n",
    "        print(\"You encounter a friendly elf who guides you deeper into the forest.\")\n",
    "    else:\n",
    "        print(\"You chose the right path.\")\n",
    "        time.sleep(1)\n",
    "        print(\"You find a hidden shortcut and make your way quickly through the forest.\")\n",
    "\n",
    "def cave_scenario():\n",
    "    print(\"You arrive at a mysterious cave entrance.\")\n",
    "    time.sleep(1)\n",
    "    print(\"You hear strange noises coming from inside.\")\n",
    "\n",
    "    choices = [\"Enter the cave.\", \"Look for another way around.\"]\n",
    "    choice = make_choice(choices)\n",
    "\n",
    "    if choice == 1:\n",
    "        print(\"You cautiously enter the cave.\")\n",
    "        time.sleep(1)\n",
    "        print(\"You discover a treasure chest inside!\")\n",
    "    else:\n",
    "        print(\"You decide to look for another way around the cave.\")\n",
    "        time.sleep(1)\n",
    "        print(\"After some exploration, you find a hidden passage that leads to the treasure.\")\n",
    "\n",
    "def main():\n",
    "    introduction()\n",
    "    time.sleep(1)\n",
    "    \n",
    "    print(\"\\nYou have two possible paths to start your journey:\")\n",
    "    time.sleep(1)\n",
    "\n",
    "    choices = [\"Enter the dark forest.\", \"Head towards the mysterious cave.\"]\n",
    "    choice = make_choice(choices)\n",
    "\n",
    "    if choice == 1:\n",
    "        forest_scenario()\n",
    "    else:\n",
    "        cave_scenario()\n",
    "\n",
    "    print(\"\\nCongratulations! You have found the hidden treasure. You successfully completed the adventure!\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5175c8d3-13f3-4d9f-9d15-86adc9c203f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#25 Build a program that solves a linear equation for x, considering different cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76c553ec-c6b1-4c35-b6a1-226cc53b4bfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def solve_linear_equation(a, b):\n",
    "    if a == 0:\n",
    "        if b == 0:\n",
    "            return \"Infinite solutions (all values of x are solutions)\"\n",
    "        else:\n",
    "            return \"No solution (the equation is not valid)\"\n",
    "    else:\n",
    "        x = -b / a\n",
    "        return f\"The solution for x is: {x}\"\n",
    "\n",
    "def main():\n",
    "    print(\"Linear Equation Solver (ax + b = 0)\")\n",
    "\n",
    "    # Get user input for coefficients\n",
    "    a = float(input(\"Enter the value of 'a': \"))\n",
    "    b = float(input(\"Enter the value of 'b': \"))\n",
    "\n",
    "    # Solve the linear equation\n",
    "    solution = solve_linear_equation(a, b)\n",
    "\n",
    "    # Display the result\n",
    "    print(\"\\nResult:\")\n",
    "    print(solution)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "print(\"Linear Equation : (ax + b = 0)\")\n",
    "a=int(input(\"Enter value a : \"))\n",
    "b=int(input(\"Enter value b : \"))\n",
    "if a==0:\n",
    "    if b==0:\n",
    "        print(\"Infinite solutions i.e. all values of x are solutions \")\n",
    "    else:\n",
    "        print(\"No solution\")\n",
    "else:\n",
    "    x=-b/a\n",
    "    print(\"Solution for x is : \",x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6dfd989-5e2b-4ad5-868e-35bf5415b24d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#26 Write a program that simulates a basic quiz game with multiple-choice questions and scoring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42b5ec4d-910f-4eba-8f04-b4645a1510ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=input(\"\"\"\"WELCOME TO KBC\"\n",
    "\\nEnter your name:\"\"\")\n",
    "\n",
    "print(\"\\nHello\",x,\n",
    "      \"\"\"\\nNow you have Entered to the Maze of KBC\n",
    "      \\nLet's start with the rules!\\nThere are a total of 15 Questions with four options each that you need to answer with no time limit\\nOne wrong answer and you will be out of the game\\nMoney prize will be rewarded for each Question you answer\\nQ No.1 : 1,000\\nQ No.2 : 5,000\\nQ No.3 : 10,000\\nQ No.4 : 25,000\\nQ No.5 : 50,000\\nQ No.6 : 1,00,000\\nQ No.7 : 3,00,000\\nQ No.8 : 15,00,000\\nQ No.9 : 25,00,000\\nQ No.10 : 35,00,000\\nQ No.11 : 45,00,000\\nQ No.12 : 60,00,000\\nQ No.13 : 75,00,000\\nQ No.14 : 90,00,000\\nQ No.15 : 1,00,00,000\\nDifficulty level increases from Question No.1 to Question No.15\n",
    "      \\nCAUTION : The answers you give are case sensitive, Please read carefully and Answer your Questions\"\"\" )\n",
    "y=input(\"\\nAre you ready to Start? Yes or No = \")\n",
    "\n",
    "\n",
    "if y==\"Yes\":\n",
    "  \n",
    "  print(\"\\nLet's Start with your first Question\")\n",
    "  print(\"\\n1. Who is the first person to land on Moon?\")\n",
    "  a=input(\"\"\"\\nA.Buzz Aldrin\\nB.Sally Ride\\nC.Neil Armstrong\\nD.John Glenn\n",
    "  \\nYour option = \"\"\")\n",
    "  if a==\"C\":\n",
    "    print(\"\"\"\\nYou answered Correctly\\nYou won 1,000\n",
    "    \\nHere comes your \n",
    "    second question ->\"\"\")\n",
    "    print(\"\"\"\\n2. When Did INDIA win it's first world cup?\"\"\")\n",
    "    x=input(\"\"\"\\nA.1969\\nB.1883\\nC.1983\\nD.2011\n",
    "    \\nYour option = \"\"\")\n",
    "    if x==\"C\":\n",
    "      print(\"\"\"\\nYou answered Correctly\\nYou won 5,000\n",
    "      \\nHere comes your \n",
    "      third question ->\"\"\")\n",
    "      print(\"\"\"\\n3. Who invented Computer?\"\"\")\n",
    "      m=input(\"\"\"\\nA.Thomas Edison\\nB.Charles Babbage\\nC.Albert Einsten\\nD.Ramanujam\n",
    "      \\nYour option = \"\"\")\n",
    "      if m==\"B\":\n",
    "        print(\"\"\"\\nYou answered Correctly\\nYou won 10,000\n",
    "        \\nHere comes your \n",
    "        fourth question ->\"\"\")\n",
    "        print(\"\"\"\\n4. Which is the toughest exam in India?\"\"\")\n",
    "        k=input(\"\"\"\\nA.UPSC\\nB.JEE\\nC.NDA\\nD.IES\n",
    "        \\nYour option = \"\"\")\n",
    "        if k==\"A\":\n",
    "          print(\"\"\"\\nYou answered Correctly\\nYou won 25,000\n",
    "        \\nHere comes your\n",
    "        fifth question ->\"\"\")\n",
    "          print(\"\"\"\\n5. How many Gnanapeeta Awards does Karnataka have?\"\"\")\n",
    "          n=input(\"\"\"\\nA.7\\nB.8\\nC.5\\nD.6\n",
    "          \\nYour option = \"\"\")\n",
    "          if n==\"B\":\n",
    "            print(\"\"\"\\nYou answered Correctly\\nYou won 50,000\n",
    "        \\nHere comes your\n",
    "        sixth question ->\"\"\")\n",
    "            print(\"\"\"\\n6. How many metropolitan cities are there in India?\"\"\")\n",
    "            e=input(\"\"\"\\nA.5\\nB.6\\nC.8\\nD.9\n",
    "            \\nYour option = \"\"\")\n",
    "            if e==\"D\":\n",
    "              print(\"\"\"\\nYou answered Correctly\\nYou won 1,00,000\n",
    "        \\nHere comes your\n",
    "        seventh question ->\"\"\")\n",
    "              print(\"\"\"\\n7. One feet is equal to how many centimeter?\"\"\")\n",
    "              b=input(\"\"\"\\nA. 30.18\\nB. 30.28\\nC. 30.38\\nD. 30.48\n",
    "              \\nYour option = \"\"\")\n",
    "              if b==\"D\":\n",
    "                print(\"\"\"\\nYou answered Correctly\\nYou won 3,00,000\n",
    "        \\nHere comes your\n",
    "        eight question ->\"\"\")\n",
    "                print(\"\"\"\\n8. How many years ago Taj Mahal was built\"\"\")\n",
    "                mn=input(\"\"\"\\nA.126\\nB.229\\nC.391\\nD.405\n",
    "                \\nYour option = \"\"\")\n",
    "                if mn==\"C\":\n",
    "                  print(\"\"\"\\nYou answered Correctly\\nYou won 15,00,000\n",
    "        \\nHere comes your\n",
    "        ninth question ->\"\"\")\n",
    "                  print(\"\"\"\\n9. Which was first Engineering college in India?\"\"\")\n",
    "                  man=input(\"\"\"\\nA.TCE\\nB.BMS\\nC.IIT Madras\\nD.IIT Roorkee\n",
    "                  \\nYour option = \"\"\")\n",
    "                  if man==\"A\":\n",
    "                    print(\"\"\"\\nYou answered Correctly\\nYou won 25,00,000\n",
    "        \\nHere comes your\n",
    "        tenth question ->\"\"\")\n",
    "                    print(\"\"\"\\n10. Which is the oldest language of India?\"\"\")\n",
    "                    na=input(\"\"\"\\nA.Tamil\\nB.Sanskrit\\nC.Urdu\\nD.Hindi\n",
    "                  \\nYour option = \"\"\")\n",
    "                    if na==\"B\":\n",
    "                      print(\"\"\"\\nYou answered Correctly\\nYou won 35,00,000\n",
    "        \\nHere comes your\n",
    "        eleventh question ->\"\"\")\n",
    "                      print(\"\"\"\\n11. Who was the first king to rule India?\"\"\")\n",
    "                      bn=input(\"\"\"\\nA.Chatrapathi Shivaji\\nB.Chandragupta Maurya\\nC.Ashok Maurya\\nD.Maharana Pratap\n",
    "                    \\nYour option = \"\"\")\n",
    "                      if bn==\"B\":\n",
    "                        print(\"\"\"\\nYou answered Correctly\\nYou won 45,00,000\n",
    "        \\nHere comes your\n",
    "        twelveth question ->\"\"\")\n",
    "                        print(\"\"\"\\n12. At what age did Mahathma Gandhiji died?\"\"\")\n",
    "                        mn=input(\"\"\"\\nA.62\\nB.68\\nC.72\\nD.78\n",
    "                      \\nYour option = \"\"\")\n",
    "                        if mn==\"D\":\n",
    "                          print(\"\"\"\\nYou answered Correctly\\nYou won 60,00,000\n",
    "        \\nHere comes your\n",
    "        thirteenth question ->\"\"\")\n",
    "                          print(\"\"\"\\n13. After the death of Jawaharlal Nehru, Who became the next prime minister of India?\"\"\")\n",
    "                          pm=input(\"\"\"\\nA.Indira Gandhi\\nB.Lal Bahadur Shastri\\nC.Morarji Desai\\nD.Gulzarilal Nanda\n",
    "                        \\nYour option = \"\"\")\n",
    "                          if pm==\"B\":\n",
    "                            print(\"\"\"\\nYou answered Correctly\\nYou won 75,00,000\n",
    "        \\nHere comes your\n",
    "        fourteenth question ->\"\"\")\n",
    "                            print(\"\"\"\\n14. Which is the oldest temple of Karnataka?\"\"\")\n",
    "                            tm=input(\"\"\"\\nA.Beluru Temple\\nB.Halebidu Temple\\nC.Chalukya Shiva Temple\\nD.Sringeri Sharadha Temple\n",
    "                          \\nYour option = \"\"\")\n",
    "                            if tm==\"C\":\n",
    "                              print(\"\"\"\\nYou answered Correctly\\nYou won 90,00,000\n",
    "        \\nHere comes your\n",
    "        fifteenth question ->\"\"\")\n",
    "                              print(\"\"\"\\n15. In which Karnataka festival burning the ten-headed Ravanasura is celebrated as triumph\"\"\")\n",
    "                    \n",
    "                              fs=input(\"\"\"\\nA.Ugadi\\nB.Dasara\\nC.Deepavali\\nD.Sankranti\n",
    "                              \\nYour option = \"\"\")\n",
    "                              if fs==\"C\":\n",
    "                                print(\"\"\"Congratulations on answering all the 15 Questions\n",
    "                              \\nYou won 1,00,00,000\"\"\")\n",
    "                              else:\n",
    "                                print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 90,00,000, Correct answer is C\"\"\")\n",
    "                            else:\n",
    "                              print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 75,00,000 , Correct answer is C\"\"\")\n",
    "                          \n",
    "                          else:\n",
    "                            print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 60,00,000 , Correct answer is B\"\"\")\n",
    "                          \n",
    "                        else:\n",
    "                          print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 45,00,000 , Correct answer is D\"\"\")\n",
    "                      else:\n",
    "                        print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 35,00,000 , Correct answer is B\"\"\")\n",
    "                    else:\n",
    "                      print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 25,00,000 , Correct answer is B\"\"\")\n",
    "                  else:\n",
    "                    print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 15,00,000 , Correct answer is A\"\"\")\n",
    "                else:\n",
    "                  print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 3,00,000 , Correct answer is C\"\"\")\n",
    "              else:\n",
    "               print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 1,00,000 , Correct answer is D\"\"\")\n",
    "            else:\n",
    "              print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 50,000 , Correct answer is D\"\"\")\n",
    "            \n",
    "            \n",
    "          else:\n",
    "            print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 25,000 , Correct answer is B\"\"\")\n",
    "          \n",
    "        else:\n",
    "          print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 10,000 , Correct answer is A\"\"\")\n",
    "          \n",
    "      else:  \n",
    "          print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 5,000 , Correct answer is B\"\"\")\n",
    "    else:\n",
    "        print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "      \\nYou go home with 1,000 , Correct answer is C\"\"\")\n",
    "  else:\n",
    "      print(\"\"\"\\nYour Answer was wrong\\nYour game comes to an end\n",
    "    \\nYou go home with 0 , Correct answer is C\"\"\")\n",
    "else:\n",
    "    print(\"\\nYou missed an Great oppurtunity\\nBetter Luck Next Time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90f8f138-ce1e-42d8-8aba-3176b41e5eee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#27 Develop a program that determines whether a given year is a prime number or not"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97452d7f-1d29-44b1-99b4-6e0e53ca61cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "i=int(input(\"Enter the Year : \"))\n",
    "if(i%2!=0 and i%3!=0 and i%5!=0 and i%7!=0):\n",
    "    print(\"Prime number\")\n",
    "else:\n",
    "    print(\"Not a Prime number\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fbe49974-a5f9-44ff-8ead-8418923a977f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#28 Create a program that sorts three numbers in ascending order using conditional statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3637a3d-8bb9-484c-b0fc-c1bcbd3b0114",
   "metadata": {},
   "outputs": [],
   "source": [
    "num1=int(input(\"Enter the first number: \"))\n",
    "num2=int(input(\"Enter the second number: \"))\n",
    "num3=int(input(\"Enter the third number: \"))\n",
    "if num1<=num2<=num3:\n",
    "    print(num1, num2, num3)\n",
    "elif num1<=num3<=num2:\n",
    "    print(num1, num3, num2)\n",
    "elif num2<=num1<=num3:\n",
    "    print(num2, num1, num3)\n",
    "elif num2<=num3 <=num1:\n",
    "    print(num2, num3, num1)\n",
    "elif num3<=num1<=num2:\n",
    "    print(num3, num1, num2)\n",
    "else:\n",
    "    print(num3, num2, num1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1966f557-07ac-442b-95ec-62a617e76eeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#29 Build a program that determines the roots of a quartic equation using numerical methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c09f0f32-57d4-4e70-ac02-83e13b59fcf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def quartic_equation(x, coefficients):\n",
    "    \"\"\"\n",
    "    Evaluate the quartic equation at a given point x.\n",
    "    coefficients: a list containing the coefficients of the quartic equation\n",
    "    \"\"\"\n",
    "    a, b, c, d, e = coefficients\n",
    "    return a * x**4 + b * x**3 + c * x**2 + d * x + e\n",
    "\n",
    "def quartic_derivative(x, coefficients):\n",
    "    \"\"\"\n",
    "    Evaluate the derivative of the quartic equation at a given point x.\n",
    "    coefficients: a list containing the coefficients of the quartic equation\n",
    "    \"\"\"\n",
    "    a, b, c, d, _ = coefficients\n",
    "    return 4 * a * x**3 + 3 * b * x**2 + 2 * c * x + d\n",
    "\n",
    "def newton_raphson(initial_guess, coefficients, tolerance=1e-6, max_iterations=100):\n",
    "    \"\"\"\n",
    "    Find the root of a quartic equation using the Newton-Raphson method.\n",
    "    initial_guess: initial guess for the root\n",
    "    coefficients: a list containing the coefficients of the quartic equation\n",
    "    tolerance: desired accuracy of the root\n",
    "    max_iterations: maximum number of iterations\n",
    "    \"\"\"\n",
    "    x = initial_guess\n",
    "\n",
    "    for iteration in range(max_iterations):\n",
    "        f_x = quartic_equation(x, coefficients)\n",
    "        f_prime_x = quartic_derivative(x, coefficients)\n",
    "\n",
    "        if abs(f_prime_x) < 1e-10:\n",
    "            print(\"Derivative is too small. Newton-Raphson method failed.\")\n",
    "            return None\n",
    "\n",
    "        x -= f_x / f_prime_x\n",
    "\n",
    "        if abs(f_x) < tolerance:\n",
    "            print(f\"Root found after {iteration + 1} iterations.\")\n",
    "            return x\n",
    "\n",
    "    print(\"Newton-Raphson method did not converge.\")\n",
    "    return None\n",
    "\n",
    "# Example usage:\n",
    "coefficients = [1, -10, 35, -50, 24]\n",
    "initial_guess = 2.0\n",
    "\n",
    "root = newton_raphson(initial_guess, coefficients)\n",
    "\n",
    "if root is not None:\n",
    "    print(f\"Root: {root}\")\n",
    "    print(f\"Function value at root: {quartic_equation(root, coefficients)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9ac68fa-b64c-49d4-802f-11e52f3ec3a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#30 Write a program that calculates the BMI (Body Mass Index) and provides health recommendations based on the user's input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cffb298-4512-40d0-8862-b89cda119645",
   "metadata": {},
   "outputs": [],
   "source": [
    "w=float(input(\"Enter your weight in kilograms : \"))\n",
    "h=float(input(\"Enter your height in meters : \"))\n",
    "bmi=w/(h**2)\n",
    "if bmi<18.5:\n",
    "    print(\"Underweight\")\n",
    "    print(\"You may need to gain some weight for better health.\")\n",
    "elif 18.5<=bmi<24.9:\n",
    "    print(\"Normal weight\")\n",
    "    print(\"Keep up the good work!\")\n",
    "elif 25<=bmi<29.9:\n",
    "    print(\"Overweight\")\n",
    "    print(\"Consider making some lifestyle changes for better health.\")\n",
    "else:\n",
    "    print(\"Obese\")\n",
    "    print(\"It is recommended to consult with a healthcare professional for advice.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a164902e-e511-4bb1-b86e-665cfe97724d",
   "metadata": {},
   "outputs": [],
   "source": [
    "CHALLENGE LEVEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e6beaab-4b52-4caf-b2cf-96af131b3003",
   "metadata": {},
   "outputs": [],
   "source": [
    "#31 Create a program that validates a password based on complexity rules (length, characters, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83a041fb-67af-46ed-8397-7f668aedb2de",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "\n",
    "def is_valid_password(password):\n",
    "    \"\"\"\n",
    "    Validate a password based on complexity rules.\n",
    "    \"\"\"\n",
    "    # Check length (at least 8 characters)\n",
    "    if len(password) < 8:\n",
    "        return False\n",
    "    \n",
    "    # Check for at least one uppercase letter\n",
    "    if not any(char.isupper() for char in password):\n",
    "        return False\n",
    "\n",
    "    # Check for at least one lowercase letter\n",
    "    if not any(char.islower() for char in password):\n",
    "        return False\n",
    "\n",
    "    # Check for at least one digit\n",
    "    if not any(char.isdigit() for char in password):\n",
    "        return False\n",
    "\n",
    "    # Check for at least one special character (e.g., !@#$%^&*)\n",
    "    if not re.search(r\"[!@#$%^&*()_+{}\\[\\]:;<>,.?~\\\\-]\", password):\n",
    "        return False\n",
    "\n",
    "    # All checks passed, the password is valid\n",
    "    return True\n",
    "\n",
    "def main():\n",
    "    print(\"Password Validator\")\n",
    "\n",
    "    while True:\n",
    "        password = input(\"Enter your password: \")\n",
    "\n",
    "        if is_valid_password(password):\n",
    "            print(\"Password is valid. Good job!\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid password. Please make sure your password meets the complexity rules.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdaea856-53e7-499a-8f7c-f9ea5382189b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#32 Develop a program that performs matrix addition and subtraction based on user input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "945b493a-baeb-4986-9a73-d3598eff85e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def matrix_addition(matrix1, matrix2):\n",
    "    \"\"\"\n",
    "    Perform matrix addition.\n",
    "    \"\"\"\n",
    "    result = [[0 for _ in range(len(matrix1[0]))] for _ in range(len(matrix1))]\n",
    "    for i in range(len(matrix1)):\n",
    "        for j in range(len(matrix1[0])):\n",
    "            result[i][j] = matrix1[i][j] + matrix2[i][j]\n",
    "    return result\n",
    "\n",
    "def matrix_subtraction(matrix1, matrix2):\n",
    "    \"\"\"\n",
    "    Perform matrix subtraction.\n",
    "    \"\"\"\n",
    "    result = [[0 for _ in range(len(matrix1[0]))] for _ in range(len(matrix1))]\n",
    "    for i in range(len(matrix1)):\n",
    "        for j in range(len(matrix1[0])):\n",
    "            result[i][j] = matrix1[i][j] - matrix2[i][j]\n",
    "    return result\n",
    "\n",
    "def input_matrix():\n",
    "    \"\"\"\n",
    "    Get user input for a matrix.\n",
    "    \"\"\"\n",
    "    rows = int(input(\"Enter the number of rows: \"))\n",
    "    columns = int(input(\"Enter the number of columns: \"))\n",
    "    \n",
    "    matrix = []\n",
    "    print(\"Enter the matrix elements:\")\n",
    "    for i in range(rows):\n",
    "        row = [float(input(f\"Enter element at position ({i+1}, {j+1}): \")) for j in range(columns)]\n",
    "        matrix.append(row)\n",
    "    \n",
    "    return matrix\n",
    "\n",
    "def print_matrix(matrix):\n",
    "    \"\"\"\n",
    "    Print a matrix.\n",
    "    \"\"\"\n",
    "    for row in matrix:\n",
    "        print(row)\n",
    "\n",
    "def main():\n",
    "    print(\"Matrix Addition and Subtraction\")\n",
    "\n",
    "    print(\"Matrix 1:\")\n",
    "    matrix1 = input_matrix()\n",
    "\n",
    "    print(\"\\nMatrix 2:\")\n",
    "    matrix2 = input_matrix()\n",
    "\n",
    "    # Check if matrices can be added/subtracted\n",
    "    if len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]):\n",
    "        print(\"Matrices are not of the same size. Addition and subtraction are not possible.\")\n",
    "        return\n",
    "\n",
    "    print(\"\\nMatrix 1:\")\n",
    "    print_matrix(matrix1)\n",
    "\n",
    "    print(\"\\nMatrix 2:\")\n",
    "    print_matrix(matrix2)\n",
    "\n",
    "    result_addition = matrix_addition(matrix1, matrix2)\n",
    "    result_subtraction = matrix_subtraction(matrix1, matrix2)\n",
    "\n",
    "    print(\"\\nMatrix Addition Result:\")\n",
    "    print_matrix(result_addition)\n",
    "\n",
    "    print(\"\\nMatrix Subtraction Result:\")\n",
    "    print_matrix(result_subtraction)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9275d05c-3f03-4c8c-9f5b-242a12c0e608",
   "metadata": {},
   "outputs": [],
   "source": [
    "#33 Write a program that calculates the greatest common divisor (GCD) of two numbers using the Euclidean algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e96a17e9-990b-4c15-a234-43eb247624d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def euclidean_gcd(a, b):\n",
    "    \"\"\"\n",
    "    Calculate the GCD of two numbers using the Euclidean algorithm.\n",
    "    \"\"\"\n",
    "    while b:\n",
    "        a, b = b, a % b\n",
    "    return a\n",
    "\n",
    "def main():\n",
    "    print(\"Greatest Common Divisor (GCD) Calculator\")\n",
    "\n",
    "    try:\n",
    "        num1 = int(input(\"Enter the first number: \"))\n",
    "        num2 = int(input(\"Enter the second number: \"))\n",
    "    except ValueError:\n",
    "        print(\"Please enter valid integers.\")\n",
    "        return\n",
    "\n",
    "    gcd = euclidean_gcd(num1, num2)\n",
    "\n",
    "    print(f\"The GCD of {num1} and {num2} is: {gcd}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c39fb81-d815-4937-bff4-8d5cb8b12455",
   "metadata": {},
   "outputs": [],
   "source": [
    "#34 Build a program that performs matrix multiplication using nested loops and conditional statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23b9d7a0-9188-4113-a75f-ceda7d638a12",
   "metadata": {},
   "outputs": [],
   "source": [
    "def matrix_multiplication(matrix1, matrix2):\n",
    "    \"\"\"\n",
    "    Perform matrix multiplication.\n",
    "    \"\"\"\n",
    "    rows1, cols1 = len(matrix1), len(matrix1[0])\n",
    "    rows2, cols2 = len(matrix2), len(matrix2[0])\n",
    "\n",
    "    # Check if matrices can be multiplied\n",
    "    if cols1 != rows2:\n",
    "        print(\"Matrices cannot be multiplied.\")\n",
    "        return None\n",
    "\n",
    "    result = [[0 for _ in range(cols2)] for _ in range(rows1)]\n",
    "\n",
    "    for i in range(rows1):\n",
    "        for j in range(cols2):\n",
    "            for k in range(cols1):\n",
    "                result[i][j] += matrix1[i][k] * matrix2[k][j]\n",
    "\n",
    "    return result\n",
    "\n",
    "def input_matrix():\n",
    "    \"\"\"\n",
    "    Get user input for a matrix.\n",
    "    \"\"\"\n",
    "    rows = int(input(\"Enter the number of rows: \"))\n",
    "    columns = int(input(\"Enter the number of columns: \"))\n",
    "    \n",
    "    matrix = []\n",
    "    print(\"Enter the matrix elements:\")\n",
    "    for i in range(rows):\n",
    "        row = [float(input(f\"Enter element at position ({i+1}, {j+1}): \")) for j in range(columns)]\n",
    "        matrix.append(row)\n",
    "    \n",
    "    return matrix\n",
    "\n",
    "def print_matrix(matrix):\n",
    "    \"\"\"\n",
    "    Print a matrix.\n",
    "    \"\"\"\n",
    "    for row in matrix:\n",
    "        print(row)\n",
    "\n",
    "def main():\n",
    "    print(\"Matrix Multiplication\")\n",
    "\n",
    "    print(\"Matrix 1:\")\n",
    "    matrix1 = input_matrix()\n",
    "\n",
    "    print(\"\\nMatrix 2:\")\n",
    "    matrix2 = input_matrix()\n",
    "\n",
    "    result = matrix_multiplication(matrix1, matrix2)\n",
    "\n",
    "    if result is not None:\n",
    "        print(\"\\nMatrix 1:\")\n",
    "        print_matrix(matrix1)\n",
    "\n",
    "        print(\"\\nMatrix 2:\")\n",
    "        print_matrix(matrix2)\n",
    "\n",
    "        print(\"\\nMatrix Multiplication Result:\")\n",
    "        print_matrix(result)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80e262b0-e5cd-4caf-a791-d69d27393f05",
   "metadata": {},
   "outputs": [],
   "source": [
    "#35 Create a program that simulates a basic text-based tic-tac-toe game against the computer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "efc99121-f31e-4764-b535-4319574a2450",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def print_board(board):\n",
    "    \"\"\"\n",
    "    Print the Tic-Tac-Toe board.\n",
    "    \"\"\"\n",
    "    for row in board:\n",
    "        print(\" | \".join(row))\n",
    "        print(\"-\" * 5)\n",
    "\n",
    "def check_winner(board, player):\n",
    "    \"\"\"\n",
    "    Check if the player has won.\n",
    "    \"\"\"\n",
    "    for row in board:\n",
    "        if all(cell == player for cell in row):\n",
    "            return True\n",
    "\n",
    "    for col in range(3):\n",
    "        if all(board[row][col] == player for row in range(3)):\n",
    "            return True\n",
    "\n",
    "    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):\n",
    "        return True\n",
    "\n",
    "    return False\n",
    "\n",
    "def is_board_full(board):\n",
    "    \"\"\"\n",
    "    Check if the board is full.\n",
    "    \"\"\"\n",
    "    return all(cell != ' ' for row in board for cell in row)\n",
    "\n",
    "def get_player_move(board):\n",
    "    \"\"\"\n",
    "    Get the player's move.\n",
    "    \"\"\"\n",
    "    while True:\n",
    "        try:\n",
    "            row = int(input(\"Enter the row (1, 2, or 3): \")) - 1\n",
    "            col = int(input(\"Enter the column (1, 2, or 3): \")) - 1\n",
    "\n",
    "            if 0 <= row <= 2 and 0 <= col <= 2 and board[row][col] == ' ':\n",
    "                return row, col\n",
    "            else:\n",
    "                print(\"Invalid move. Please try again.\")\n",
    "        except ValueError:\n",
    "            print(\"Invalid input. Please enter a number.\")\n",
    "\n",
    "def get_computer_move(board):\n",
    "    \"\"\"\n",
    "    Get the computer's move.\n",
    "    \"\"\"\n",
    "    available_moves = [(row, col) for row in range(3) for col in range(3) if board[row][col] == ' ']\n",
    "    return random.choice(available_moves)\n",
    "\n",
    "def main():\n",
    "    print(\"Tic-Tac-Toe Game\")\n",
    "    board = [[' ' for _ in range(3)] for _ in range(3)]\n",
    "    players = ['X', 'O']\n",
    "    current_player = random.choice(players)\n",
    "\n",
    "    while True:\n",
    "        print_board(board)\n",
    "\n",
    "        if current_player == 'X':\n",
    "            row, col = get_player_move(board)\n",
    "        else:\n",
    "            print(\"Computer's turn:\")\n",
    "            row, col = get_computer_move(board)\n",
    "\n",
    "        board[row][col] = current_player\n",
    "\n",
    "        if check_winner(board, current_player):\n",
    "            print_board(board)\n",
    "            print(f\"{current_player} wins!\")\n",
    "            break\n",
    "\n",
    "        if is_board_full(board):\n",
    "            print_board(board)\n",
    "            print(\"It's a tie!\")\n",
    "            break\n",
    "\n",
    "        current_player = 'O' if current_player == 'X' else 'X'\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33dc6f46-33e6-4f24-a039-8671d21c12f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#36 Write a program that generates Fibonacci numbers up to a specified term using iterative methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c01df09-aa52-456d-8155-4f87633c9d96",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_fibonacci(n):\n",
    "    \"\"\"\n",
    "    Generate Fibonacci numbers up to the nth term using iterative method.\n",
    "    \"\"\"\n",
    "    fibonacci_sequence = [0, 1]\n",
    "\n",
    "    for i in range(2, n):\n",
    "        next_term = fibonacci_sequence[i-1] + fibonacci_sequence[i-2]\n",
    "        fibonacci_sequence.append(next_term)\n",
    "\n",
    "    return fibonacci_sequence\n",
    "\n",
    "def main():\n",
    "    print(\"Fibonacci Number Generator\")\n",
    "\n",
    "    try:\n",
    "        n = int(input(\"Enter the number of terms to generate: \"))\n",
    "        if n <= 0:\n",
    "            print(\"Please enter a positive integer.\")\n",
    "            return\n",
    "    except ValueError:\n",
    "        print(\"Invalid input. Please enter a positive integer.\")\n",
    "        return\n",
    "\n",
    "    fibonacci_sequence = generate_fibonacci(n)\n",
    "\n",
    "    print(f\"\\nFibonacci Sequence up to term {n}:\")\n",
    "    print(fibonacci_sequence)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ffd140ca-93d2-4692-be08-4c7fd3d54072",
   "metadata": {},
   "outputs": [],
   "source": [
    "#37 Develop a program that calculates the nth term of the Fibonacci sequence using memoization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cd53dd89-90cf-4843-85c1-5db7c9989a61",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fibonacci_memo(n, memo={}):\n",
    "    \"\"\"\n",
    "    Calculate the nth term of the Fibonacci sequence using memoization.\n",
    "    \"\"\"\n",
    "    if n in memo:\n",
    "        return memo[n]\n",
    "    \n",
    "    if n <= 1:\n",
    "        return n\n",
    "\n",
    "    result = fibonacci_memo(n - 1, memo) + fibonacci_memo(n - 2, memo)\n",
    "    memo[n] = result\n",
    "    return result\n",
    "\n",
    "def main():\n",
    "    print(\"Fibonacci Number Calculator using Memoization\")\n",
    "\n",
    "    try:\n",
    "        n = int(input(\"Enter the term number to calculate: \"))\n",
    "        if n < 0:\n",
    "            print(\"Please enter a non-negative integer.\")\n",
    "            return\n",
    "    except ValueError:\n",
    "        print(\"Invalid input. Please enter a non-negative integer.\")\n",
    "        return\n",
    "\n",
    "    fibonacci_result = fibonacci_memo(n)\n",
    "\n",
    "    print(f\"\\nThe {n}th term of the Fibonacci sequence is: {fibonacci_result}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72f22934-78c9-4c06-a017-e3b5b67933c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#38 Create a program that generates a calendar for a given month and year using conditional statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7fa7a77-c4c5-4b2c-ac58-9d426bede477",
   "metadata": {},
   "outputs": [],
   "source": [
    "import calendar\n",
    "\n",
    "def generate_calendar(year, month):\n",
    "    \"\"\"\n",
    "    Generate a calendar for a given month and year.\n",
    "    \"\"\"\n",
    "    cal = calendar.monthcalendar(year, month)\n",
    "\n",
    "    print(f\"\\nCalendar for {calendar.month_name[month]} {year}:\\n\")\n",
    "    print(\"Mo Tu We Th Fr Sa Su\")\n",
    "\n",
    "    for week in cal:\n",
    "        for day in week:\n",
    "            if day == 0:\n",
    "                print(\"   \", end=\" \")  # Print empty spaces for days before the month starts\n",
    "            else:\n",
    "                print(f\"{day:2} \", end=\" \")\n",
    "\n",
    "        print()\n",
    "\n",
    "def main():\n",
    "    print(\"Calendar Generator\")\n",
    "\n",
    "    try:\n",
    "        year = int(input(\"Enter the year: \"))\n",
    "        month = int(input(\"Enter the month (1-12): \"))\n",
    "        \n",
    "        if not (1 <= month <= 12):\n",
    "            print(\"Invalid month. Please enter a number between 1 and 12.\")\n",
    "            return\n",
    "    except ValueError:\n",
    "        print(\"Invalid input. Please enter valid integers for year and month.\")\n",
    "        return\n",
    "\n",
    "    generate_calendar(year, month)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29fe3103-2b6a-42bb-932f-75166105089b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#39 Build a program that simulates a basic text-based blackjack game against the computer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5d3ce35-9797-42d9-a115-065d56715f07",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "def deal_card():\n",
    "    \"\"\"\n",
    "    Deal a random card.\n",
    "    \"\"\"\n",
    "    cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]\n",
    "    return random.choice(cards)\n",
    "\n",
    "def calculate_score(cards):\n",
    "    \"\"\"\n",
    "    Calculate the total score of a hand.\n",
    "    \"\"\"\n",
    "    # Check for Blackjack (Ace + 10-value card) and adjust Ace value if needed\n",
    "    if sum(cards) == 21 and len(cards) == 2:\n",
    "        return 0\n",
    "    \n",
    "    # Check for Ace and adjust its value if it helps to avoid busting\n",
    "    if 11 in cards and sum(cards) > 21:\n",
    "        cards.remove(11)\n",
    "        cards.append(1)\n",
    "    \n",
    "    return sum(cards)\n",
    "\n",
    "def compare(user_score, computer_score):\n",
    "    \"\"\"\n",
    "    Compare the user's and computer's scores and determine the winner.\n",
    "    \"\"\"\n",
    "    if user_score == computer_score:\n",
    "        return \"It's a draw!\"\n",
    "    elif computer_score == 0:\n",
    "        return \"You lose, opponent has a Blackjack!\"\n",
    "    elif user_score == 0:\n",
    "        return \"You win with a Blackjack!\"\n",
    "    elif user_score > 21:\n",
    "        return \"You went over. You lose.\"\n",
    "    elif computer_score > 21:\n",
    "        return \"Opponent went over. You win!\"\n",
    "    elif user_score > computer_score:\n",
    "        return \"You win!\"\n",
    "    else:\n",
    "        return \"You lose.\"\n",
    "\n",
    "def play_game():\n",
    "    print(\"Welcome to Blackjack!\")\n",
    "\n",
    "    # Deal initial cards\n",
    "    user_cards = [deal_card(), deal_card()]\n",
    "    computer_cards = [deal_card(), deal_card()]\n",
    "\n",
    "    game_over = False\n",
    "\n",
    "    while not game_over:\n",
    "        user_score = calculate_score(user_cards)\n",
    "        computer_score = calculate_score(computer_cards)\n",
    "\n",
    "        print(f\"Your cards: {user_cards}, current score: {user_score}\")\n",
    "        print(f\"Computer's first card: {computer_cards[0]}\")\n",
    "\n",
    "        # Check if someone has Blackjack or went over 21\n",
    "        if user_score == 0 or computer_score == 0 or user_score > 21:\n",
    "            game_over = True\n",
    "        else:\n",
    "            # Ask the user if they want to draw another card\n",
    "            should_continue = input(\"Type 'y' to get another card, 'n' to pass: \")\n",
    "            if should_continue == 'y':\n",
    "                user_cards.append(deal_card())\n",
    "            else:\n",
    "                game_over = True\n",
    "\n",
    "    # Computer's turn to draw cards\n",
    "    while computer_score != 0 and computer_score < 17:\n",
    "        computer_cards.append(deal_card())\n",
    "        computer_score = calculate_score(computer_cards)\n",
    "\n",
    "    print(f\"\\nYour final hand: {user_cards}, final score: {user_score}\")\n",
    "    print(f\"Computer's final hand: {computer_cards}, final score: {computer_score}\")\n",
    "\n",
    "    # Determine the winner\n",
    "    print(compare(user_score, computer_score))\n",
    "\n",
    "# Run the game\n",
    "if __name__ == \"__main__\":\n",
    "    play_game()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c15412c6-ab2c-46bb-be88-84c4356d4589",
   "metadata": {},
   "outputs": [],
   "source": [
    "#40 Write a program that generates the prime factors of a given number using trial division"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "adf9adf6-bcba-4478-bea6-64e42782a415",
   "metadata": {},
   "outputs": [],
   "source": [
    "def prime_factors(n):\n",
    "    \"\"\"\n",
    "    Generate the prime factors of a given number using trial division.\n",
    "    \"\"\"\n",
    "    factors = []\n",
    "    divisor = 2\n",
    "\n",
    "    while divisor <= n:\n",
    "        if n % divisor == 0:\n",
    "            factors.append(divisor)\n",
    "            n = n // divisor\n",
    "        else:\n",
    "            divisor += 1\n",
    "\n",
    "    return factors\n",
    "\n",
    "def main():\n",
    "    print(\"Prime Factor Generator\")\n",
    "\n",
    "    try:\n",
    "        number = int(input(\"Enter a positive integer: \"))\n",
    "        if number <= 0:\n",
    "            print(\"Please enter a positive integer.\")\n",
    "            return\n",
    "    except ValueError:\n",
    "        print(\"Invalid input. Please enter a positive integer.\")\n",
    "        return\n",
    "\n",
    "    factors = prime_factors(number)\n",
    "\n",
    "    if len(factors) == 0:\n",
    "        print(f\"{number} has no prime factors.\")\n",
    "    else:\n",
    "        print(f\"Prime factors of {number}: {factors}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
